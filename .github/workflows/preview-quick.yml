# ------------------------------------------------------------
# Onyx PR Preview  ‚ûú  Keystone Cloud Tests
# ------------------------------------------------------------
  name: PR Preview + Keystone

  on:
    pull_request:
      types: [opened, reopened, synchronize]
      branches: [main]
  
  permissions:            # allow the workflow to post a comment
    contents: read
    pull-requests: write
  
  concurrency:
    group: pr-preview-${{ github.event.pull_request.number }}
    cancel-in-progress: true
  
  jobs:
    preview_and_test:
      runs-on: ubuntu-latest
      timeout-minutes: 60         # enough for build + tests
  
      env:
        IMAGE_TAG: ci
        STACK_NAME: onyx-${{ github.event.pull_request.number }}
  
      steps:
      # 1 ‚îÄ checkout
      - uses: actions/checkout@v4
  
      # 2 ‚îÄ free disk
      - uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          large-packages: true
  
      # 3 ‚îÄ build *only* the images that changed
      - name: Build API & Web images
        run: |
          IMAGE_TAG=${IMAGE_TAG} \
          docker compose -f deployment/docker_compose/docker-compose.dev.yml \
            build api_server web_server
  
      # 4 ‚îÄ start the stack (no model-servers)
      - name: Start stack
        run: |
          IMAGE_TAG=${IMAGE_TAG} \
          DISABLE_MODEL_SERVER=true \
          docker compose -f deployment/docker_compose/docker-compose.dev.yml \
            --project-name ${STACK_NAME} \
            up -d --no-build \
            --scale indexing_model_server=0 \
            --scale inference_model_server=0
  
      # 5 ‚îÄ wait until /health returns 200 (max 10 min)
      - name: Wait for health check
        run: |
          docker logs -f ${STACK_NAME}-api_server-1 &
          start=$(date +%s); timeout=$((10*60))
          until curl -sf http://localhost:8080/health; do
            if [ $(($(date +%s) - start)) -gt $timeout ]; then
              echo "API still not healthy after 10 min"; exit 1
            fi
            sleep 5
          done
          echo "‚úÖ API healthy"
  
      # 6 ‚îÄ expose stack via Quick Tunnel
      - uses: AnimMouse/setup-cloudflared@v2
  
      - name: Launch Cloudflare Quick Tunnel
        id: tunnel
        run: |
          nohup cloudflared tunnel --url http://localhost:80 --no-autoupdate > cf.log 2>&1 &
          for i in {1..30}; do
            url=$(grep -oE 'https://[0-9a-z-]+\.trycloudflare\.com' cf.log | head -n 1)
            [ -n "$url" ] && { echo "preview_url=$url" >> $GITHUB_OUTPUT; break; }
            sleep 2
          done
          [ -n "$url" ] || (echo "Tunnel never returned a URL" && exit 1)
          echo "::notice title=Preview URL::$url"
          echo "### üåê Preview URL\n\n$url" >> $GITHUB_STEP_SUMMARY
  
      # 7 ‚îÄ post link to the PR
      - uses: actions/github-script@v7
        env:
          PREVIEW_URL: ${{ steps.tunnel.outputs.preview_url }}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üåê **Preview ready:** ${process.env.PREVIEW_URL}`
            })
  
      # 8 ‚îÄ Keystone cloud tests
      - name: Install Keystone CLI helper
        run: |
          pip install requests docopt
          chmod +x keystone-ci.py      # assume this script is in the repo
  
      - name: Run Keystone Test Suite
        id: keystone
        env:
          KEYSTONE_API_KEY: ${{ secrets.KEYSTONE_API_KEY }}
        run: |
          BASE_URL="${{ steps.tunnel.outputs.preview_url }}"
          echo "Running Keystone tests against $BASE_URL"
          python3 keystone-ci.py run \
            --suite-id="${{ vars.KEYSTONE_SUITE_ID }}" \
            --base-url="$BASE_URL" \
            --output=text \
            --ci-run-id="${{ github.run_id }}" \
            --branch="${{ github.ref_name }}" \
            --commit="${{ github.sha }}" \
            --timeout=300 \
            --poll-interval=5
  
      # 9 ‚îÄ Shut everything down
      - name: Shutdown stack
        if: always()
        run: |
          docker compose -f deployment/docker_compose/docker-compose.dev.yml \
            --project-name ${STACK_NAME} down -v
  