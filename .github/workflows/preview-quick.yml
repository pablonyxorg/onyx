# ------------------------------------------------------------
# Onyx PR Preview  ‚Äì expose URL only (no local tests)
# ------------------------------------------------------------
name: PR Preview

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [main]

permissions:                      # allow the bot to post the link
  contents: read
  pull-requests: write

concurrency:
  group: pr-preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  preview:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    outputs:
      preview_url: ${{ steps.tunnel.outputs.preview_url }}

    env:
      IMAGE_TAG: ci
      STACK_NAME: onyx-${{ github.event.pull_request.number }}

    steps:
    # 1 ‚îÄ check out code
    - uses: actions/checkout@v4

    # 2 ‚îÄ free disk (10¬†GB)
    - uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        large-packages: true

    # 3 ‚îÄ build only the images that changed
    - name: Build API & Web images
      run: |
        IMAGE_TAG=${IMAGE_TAG} \
        docker compose -f deployment/docker_compose/docker-compose.dev.yml \
          build api_server web_server

    # 4 ‚îÄ start stack (skip model servers)
    - name: Start stack
      run: |
        IMAGE_TAG=${IMAGE_TAG} \
        DISABLE_MODEL_SERVER=true \
        docker compose -f deployment/docker_compose/docker-compose.dev.yml \
          --project-name ${STACK_NAME} \
          up -d --no-build \
          --scale indexing_model_server=0 \
          --scale inference_model_server=0

    # 5 ‚îÄ wait (10‚ÄØmin max) until /health is green
    - name: Wait for health check (max¬†10¬†min)
      run: |
        docker logs -f ${STACK_NAME}-api_server-1 &
        start=$(date +%s); timeout=$((10*60))
        until curl -sf http://localhost:8080/health; do
          if [ $(($(date +%s) - start)) -gt $timeout ]; then
            echo "API still not healthy after 10¬†min"; exit 1
          fi
          sleep 5
        done
        echo "‚úÖ health endpoint ready"

    # 6 ‚îÄ expose via Cloudflare Quick Tunnel
    - uses: AnimMouse/setup-cloudflared@v2

    - name: Launch Cloudflare Quick Tunnel
      id: tunnel
      run: |
        nohup cloudflared tunnel --url http://localhost:80 --no-autoupdate > cf.log 2>&1 &
        for i in {1..30}; do
          url=$(grep -oE 'https://[0-9a-z-]+\.trycloudflare\.com' cf.log | head -n 1)
          [ -n "$url" ] && { echo "preview_url=$url" >> $GITHUB_OUTPUT; break; }
          sleep 2
        done
        [ -n "$url" ] || (echo "Tunnel never returned a URL" && exit 1)

    # 7 ‚îÄ comment the live link on the PR
    - uses: actions/github-script@v7
      env:
        PREVIEW_URL: ${{ steps.tunnel.outputs.preview_url }}
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üåê **Preview ready:** ${process.env.PREVIEW_URL}`
          })

    # 8 ‚îÄ keep preview alive
    - name: Keep preview alive
      run: |
        echo "Preview will stay up for 45 min (press CTRL-C to stop)..."
        sleep 2700          # 45 min

    # 9 ‚îÄ shut everything down
    - name: Shutdown stack
      if: always()
      run: |
        docker compose -f deployment/docker_compose/docker-compose.dev.yml \
          --project-name ${STACK_NAME} down -v
